from func import *
import random

# Основные функции из модуля:
# > init_pair(A, B, P, Y) -- возвращает два объекта класса person, которые имеют своё секретное число (А или B, соответственно), устанавливает P и Y (для всех); последние
#       два аргумента -- по умолчанию: если их не указывать, то они сохранят своё значение с прошлой отработки;
# > print_situation(first, second) -- выводит все четыре текущих значения: A, B, P, Y;
# > __P__(X) -- устанавливает значение общей P в Х, может быть использована без аргумента: просто вернёт Х; как-бы приватный метод;
# > __Y__(X) -- устанавливает значение общей Y в Х, может быть использована без аргумента: просто вернёт Х; как-бы приватный метод;
# Поля класса person:
# > __secret__ -- секретное число данного объекта, как бы приватное поле;
# Методы класса person:
# > Конструктор принимает одно значение -- значение секретного числа; 
# > get_msg() -- возвращает сообщение, которое сгенерирует данный объект с использованием текущих P и Y, а также своего секретного числа;
# > get_key(msg) -- возвращает ключ, который будет сгенерирован от сообщения (ВАЖНО: от чужого сообщения) с использованием текущего P, а также своего секретного числа;
# > __print__() -- печатает секретное число объекта, как-бы приватный метод;
# ПРИМЕЧАНИЕ: крайне рекомендуется сразу переводить сообщение в ключ: если между генерацией сообщения и переводом его в ключ будет произведено изменение P или Y, то ничего не получится.

A = random.randint(1, 99999)
B = random.randint(1, 99999)
C = random.randint(1, 99999)
D = random.randint(1, 99999)
P = random.randint(1, 99999)
Y = random.randint(1, 99999)


a, b = init_pair(A, B, P, Y) #ПЕРВАЯ ПАРА ЛЮДЕЙ
c, d = init_pair(C, D) #ВТОРАЯ ПАРА ЛЮДЕЙ (P И Y -- ПРЕЖНИЕ)

# ПРИМЕР 1
print("DEMO 1:")
print_situation(a, b)
print ('a = ', a.get_msg())
print ('b = ', b.get_msg())
print ('key on a: ', a.get_key(b.get_msg()))
print ('key on b: ', b.get_key(a.get_msg()))
print (f'{a.get_key(b.get_msg())} == {b.get_key(a.get_msg())}') # СРАВНИВАЕТ КЛЮЧИ (ВИЗУАЛЬНО): ОНИ РАВНЫ

print("\n\n")

# ПРИМЕР 2
print("DEMO 2:")
print_situation(c, d)
print ('c = ', c.get_msg())
print ('d = ', d.get_msg())
print ('key on c: ', c.get_key(d.get_msg()))
print ('key on b: ', d.get_key(c.get_msg()))
print (f'{c.get_key(d.get_msg())} == {d.get_key(c.get_msg())}') # СРАВНИВАЕТ КЛЮЧИ (ВИЗУАЛЬНО): ОНИ РАВНЫ
